#!/usr/bin/env ruby
require 'csv'
require 'bundler'
require 'yaml'

Bundler.require

config = YAML::load_file('config.yml')
Geocoder.configure(
   :lookup => :google_premier,
    :api_key => ([config["key"], config["client"], config["channel"]])
)

opts = Trollop::options do
  version "0.9 2016 Simplifi"
  banner <<-EOS

Converts a csv file with the following columns:

  required: name, address, city, state, zip
  optional: longitude, latitude, radius, fence_type, label

outputs the following YAML format:

   ---
   - :name: 'BALLWEG IMPLEMENT CO., INC.: W7246 HWY 68'
     :address: W7246 HWY 68, WAUPUN, WI 53963
     :radius: 0.062
     :label: 'my label'
     :fence_type: 'Target'
     :results:
     - :address: Waupun, WI 53963, USA
       :location_type: APPROXIMATE
       :latitude: 43.6333219
       :longitude: -88.72955189999999

preference of addresses: ROOFTOP, RANGE_INTERPOLATED, GEOMETRIC_CENTER, APPROXIMATE

radius      - expressed in miles
label       - will override the default label of "name: address"
fence_type  - valid values are Target or Conversion, default is Target
EOS

  opt :source, "Source yaml file", type: IO
  opt :output, "Output file location", type: String, default: ''

end

if opts[:source].nil?
  source_io = ARGF.read
else
  source_io = File.open(opts[:source]) { |f| f.read }
end

source_io.encode!('UTF-8', invalid: :replace)

addresses = CSV.new(source_io,
                    headers: true,
                    header_converters: [:downcase, lambda {|f| "#{f} ".strip}],
                    converters: [lambda {|f| "#{f} ".strip}],
                    encoding: 'ISO-8859-1',
                    skip_blanks: true
                   )
locations = []

start_time = Time.now
lookups_done = 0
addresses.each do |address|
  next if address.to_hash.values.all? { |val| val.to_s.strip == "" }
  begin
    location = {
      name: address.fetch("name", ""),
      address: "#{address.fetch("address","")}, #{address.fetch("city","")}, #{address.fetch("state", "")} #{address.fetch("zip","")}",
      radius: address.fetch("radius", 0).to_f,
      results: []
    }
    if (address['latitude'] && address['latitude'] != "") && (address['longitude'] && address['longitude'] != "")
      location[:results] << {
        address: address.fetch("address",""),
        location_type: 'PROVIDED',
        latitude: address['latitude'].to_f,
        longitude: address['longitude'].to_f
      }
    end
    location[:label] = address.fetch("label", "")
    if location[:label].strip.length == 0
      location[:label] = "#{address.fetch("name","")}: #{address.fetch("address", "")}"
    end
    location[:fence_type] = address.fetch("fence_type", nil)
    locations << location
  rescue => error
    STDERR.puts error.inspect
    STDERR.puts "Unable to process row: #{address.inspect}"
  end
end

locations.each do |location|
  next if location[:results].any?
  # we don't have any lat long data so let's search for it
  search_string = "#{location[:name]} #{location[:address]} #{location[:city]}, #{location[:state]} #{location[:zip]}".strip

  geo_coder_results = Geocoder.search(search_string)

  geo_coder_results.each do |geo_coder_result|
    result = {}

    geo_location = geo_coder_result.data['geometry']['location']
    result[:address] = geo_coder_result.data['formatted_address']
    result[:location_type] = geo_coder_result.data['geometry']['location_type']
    result[:latitude] = geo_location['lat']
    result[:longitude] = geo_location['lng']
    location[:results] << result
  end
  lookups_done += 1
  STDERR.print "\rLookup rate: #{(lookups_done / (Time.now - start_time)).round(2)}/s \t percent done: #{((lookups_done / locations.length.to_f) * 100).round(2)} \t total looked up: #{lookups_done}       "
  sleep 0.1
end
STDERR.puts "\nfinished converting csv file"

if ARGV[1].nil?
  puts locations.to_yaml
else
  File.open(ARGV[1], "w") { |f| f.write(locations.to_yaml) }
end

